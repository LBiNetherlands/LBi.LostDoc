<?xml version="1.0" encoding="utf-8"?>
<!-- 
  
  Copyright 2012-2014 DigitasLBi Netherlands B.V.
  
  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at
  
      http://www.apache.org/licenses/LICENSE-2.0
  
  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License. 
  
-->

<template xmlns:var="urn:lostdoc:variable">
  <!-- parameters can be used to influence templates without having to modify them-->
  <parameter name="LogoUrl" select="'images\lostdoc.svg'" />

  <!-- indexed nodes, accessible through ld:key('indexName', value) -->
  <index name="aid" match="*[@assetId]" key="@assetId"/>
  <!--<index name="aidNoVer" match="*[@assetId]" key="get-id(@assetId)"/>
  <index name="aidInherits" match="*[@assetId and inherits/@type]" key="inherits/@type"/>

  <include-resource path="less\style.less" output="css\style.css">
    <transform name="less"/>
  </include-resource>

  <include-resource path="js\lib\zepto.js" output="js\lib\zepto.js"/>
  <include-resource path="js\lostdoc.settings.js" output="js\lostdoc.settings.js"/>
  <include-resource path="js\lostdoc.layout.js" output="js\lostdoc.layout.js"/>
  <include-resource path="js\lostdoc.js" output="js\lostdoc.js"/>

  <include-resource path="{$LogoUrl}"
                    output="{concat('images/logo.', substring-after-last($LogoUrl, '.'))}">
    -->
  <!--<transform name="scale">
      <with-param name="mode" select="'Bound'"/>
      <with-param name="width" select="200"/>
      <with-param name="height" select="75"/>
    </transform>-->
  <!--
  </include-resource>-->

  <!-- inject [with-param/@name='logoUri'] element in all 'apply-stylesheet' directives found. -->
  <!-- TODO look into how GlobalParameter.xslt handles it's 'value' -->
  <!--<meta-template stylesheet="GlobalParameter.xslt">
    <with-param name="name" value="logoUri"/>
    <with-param name="value" value="concat('images/logo.', substring-after-last($LogoUrl, '.'))"/>
  </meta-template>-->

  <!--<apply-stylesheet stylesheet="EnrichNaming.xslt" />-->

  <!--<apply-stylesheet name="Library"
                    select="/bundle"
                    output="'Library.html'"
                    stylesheet="Library.xslt">

    <register-asset assetId="'*:*'"
                    version="'0.0.0.0'" />
  </apply-stylesheet>-->

  <apply-stylesheet name="Master"
                    output="'output://master.xml'"
                    stylesheet="Master.xslt"/>

  <!--<index name="name"
         input="output://master.xml"
         match="asset[@assetId]"
         key="@assetId"
         select="name/text()" />

  <index name="title"
         input="output://master.xml"
         match="asset[@assetId]"
         key="@assetId"
         select="title/text()" />-->

  <!--<apply-stylesheet name="Navigation"
                    select="/"
                    output="'output://navigation.xml'"
                    stylesheet="Navigation.xslt"/>-->

  <!--<index name="nav"
         input="output://navigation.xml"
         match="*[@assetId]"
         key="@assetId" />-->

  <!--<apply-stylesheet stylesheet="RewriteNaming.xslt" />-->


  <!--<apply-stylesheet name="Assembly summary"
                    select="/bundle/assembly[@phase = '0']"
                    output="concat(@filename, '/', get-significant-version(@assetId), '.html')"
                    stylesheet="Assembly.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Merged Namespaces"
                    select="/bundle/assembly/namespace[not(preceding::namespace[@phase = '0']/@name = @name) and @phase = '0']"
                    var:ns="@name"
                    output="concat(coalesce(@name, 'Global'), '.html')"
                    stylesheet="Namespace.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="'0.0.0.0'"/>

    <register-asset select="/bundle/assembly/namespace[@phase = '0' and @name= $ns]"
                    assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <with-param name="assetId" select="@assetId" />
    <with-param name="namespace" select="@name" />
  </apply-stylesheet>

  <apply-stylesheet name="Types"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface) and @phase = '0']"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', @name), '`.&lt;&gt;', '-/()'), '.html')"
                    stylesheet="Type.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Enumerations"
                    select="/bundle/assembly/namespace//enum[@phase = '0']"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', @name), '`.&lt;&gt;', '-/()'), '.html')"
                    stylesheet="Type.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <register-section select="field"
                      assetId="get-id(@assetId)"
                      version="get-version(@assetId)"
                      name="@name" />

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Method overload disambiguation"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and @phase = '0']/method[not(preceding-sibling::method/@name = @name) and following-sibling::method/@name = @name]"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', coalesce(substring-after-last(@name, '.'), @name)), '`.&lt;&gt;', '-/()'), '.html')"
                    stylesheet="Overloads.xslt"
                    
                    var:aid="substring-after(get-id(@assetId), ':')"
                    var:asset="coalesce(substring-before($aid, '('), $aid)"
                    var:leading="substring-before-last($asset, '.')"
                    var:leading-clean="iif($leading, concat($leading, '.'), '')"
                    var:trailing="coalesce(substring-after-last($asset, '.'), $asset)"
                    var:trailing-clean="coalesce(substring-before($trailing, '`'), $trailing)"
                    var:assetId="concat('Overload:', $leading-clean, $trailing-clean)"
                    var:version="get-version(@assetId)">

    <register-asset  assetId="$assetId"
                     version="$version"/>

    <with-param name="assetId" select="get-asset($assetId, $version)" />
    <with-param name="type" select="../@assetId" />
    <with-param name="name" select="@name" />
    <with-param name="memberType" select="local-name()" />
  </apply-stylesheet>

  <apply-stylesheet name="Overloaded methods"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and namespace-uri(.) = '' and @phase = '0']/method[not(@declaredAs) and (preceding-sibling::method/@name = @name or following-sibling::method/@name = @name)]"
                    var:name="@name"
                    var:count="count(preceding-sibling::method[@name = $name]) + 1"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', coalesce(substring-after-last(@name, '.'), @name)), '`.&lt;&gt;', '-/()'), '-', $count, '.html')"
                    stylesheet="Member.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Remaining methods"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and namespace-uri(.) = '' and @phase = '0']/method[not(@declaredAs) and not(preceding-sibling::method/@name = @name) and not(following-sibling::method/@name = @name)]"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', coalesce(substring-after-last(@name, '.'), @name)), '`.&lt;&gt;', '-/()'),  '.html')"
                    stylesheet="Member.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Property overload disambiguation"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and @phase = '0']/property[not(preceding-sibling::property/@name = @name) and following-sibling::property/@name = @name]"
                    var:aid="substring-after(get-id(@assetId), ':')"
                    var:asset="coalesce(substring-before($aid, '('), $aid)"
                    var:leading="substring-before-last($asset, '.')"
                    var:leading-clean="iif($leading, concat($leading, '.'), '')"
                    var:trailing="coalesce(substring-after-last($asset, '.'), $asset)"
                    var:trailing-clean="coalesce(substring-before($trailing, '`'), $trailing)"
                    var:assetId="concat('Overload:', $leading-clean, $trailing-clean)"
                    var:version="get-version(@assetId)"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', coalesce(substring-after-last(@name, '.'), @name)), '`.&lt;&gt;', '-/()'),  '-Properties.html')"
                    stylesheet="Overloads.xslt">

    <register-asset assetId="$assetId"
                    version="$version"/>

    <with-param name="assetId" select="get-asset($assetId, $version)" />
    <with-param name="type" select="../@assetId" />
    <with-param name="name" select="@name" />
    <with-param name="memberType" select="local-name()" />
  </apply-stylesheet>

  <apply-stylesheet name="Overloaded properties"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and namespace-uri(.) = '' and @phase = '0']/property[not(@declaredAs) and (preceding-sibling::property/@name = @name or following-sibling::property/@name = @name)]"
                    var:name="@name"
                    var:count="count(preceding-sibling::property[@name = $name]) + 1"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', coalesce(substring-after-last(@name, '.'), @name)), '`.&lt;&gt;', '-/()'), '-', $count, '.html')"
                    stylesheet="Member.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Remaining properties"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and namespace-uri(.) = '' and @phase = '0']/property[not(@declaredAs) and not(preceding-sibling::property/@name = @name) and not(following-sibling::property/@name = @name)]"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', coalesce(substring-after-last(@name, '.'), @name)), '`.&lt;&gt;', '-/()'),  '.html')"
                    stylesheet="Member.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)" />

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Operators overload disambiguation"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and @phase = '0']/operator[not(preceding-sibling::operator/@name = @name) and following-sibling::operator/@name = @name]"
                    var:aid="substring-after(get-id(@assetId), ':')"
                    var:asset="coalesce(substring-before($aid, '('), $aid)"
                    var:leading="substring-before-last($asset, '.')"
                    var:leading-clean="iif($leading, concat($leading, '.'), '')"
                    var:trailing="coalesce(substring-after-last($asset, '.'), $asset)"
                    var:trailing-clean="coalesce(substring-before($trailing, '`'), $trailing)"
                    var:assetId="concat('Overload:', $leading-clean, $trailing-clean)"
                    var:version="get-version(@assetId)"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', @name), '`.&lt;&gt;', '-/()'),  '-Operators.html')"
                    stylesheet="Overloads.xslt">

    <register-asset assetId="$assetId"
                    version="$version"/>

    <with-param name="assetId" select="get-asset($assetId, $version)" />
    <with-param name="type" select="../@assetId" />
    <with-param name="name" select="@name" />
    <with-param name="memberType" select="local-name()" />
  </apply-stylesheet>

  <apply-stylesheet name="Overloaded operators"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and namespace-uri(.) = '' and @phase = '0']/operator[not(@declaredAs) and (preceding-sibling::operator/@name = @name or following-sibling::operator/@name = @name)]"
                    var:name="@name"
                    var:count="count(preceding-sibling::operator[@name = $name]) + 1"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', @name), '`.&lt;&gt;', '-/()'), '-', $count, '.html')"
                    stylesheet="Member.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)"/>

    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Remaining Operators"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface|self::enum) and namespace-uri(.) = '' and @phase = '0']/operator[not(@declaredAs) and not(preceding-sibling::operator/@name = @name) and not(following-sibling::operator/@name = @name)]"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', @name), '`.&lt;&gt;', '-/()'),  '.html')"
                    stylesheet="Member.xslt">
    
    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)"/>
    
    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Constructors" select="/bundle/assembly/namespace//*/constructor[@phase = '0']"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', @name), '`.&lt;&gt;', '-/()'), 'ctor', count(./preceding-sibling::constructor) + 1, '.html')"
                    stylesheet="Member.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)"/>
    
    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>

  <apply-stylesheet name="Members"
                    select="/bundle/assembly/namespace//*[(self::class|self::struct|self::interface)]/*[(self::field|self::event) and not(@declaredAs) and @phase = '0']"
                    output="concat(ancestor::assembly/@filename, '/', get-significant-version(@assetId), '/', translate(concat(join((ancestor::*[ancestor::assembly])/@name, '/'), '/', coalesce(substring-after-last(@name, '.'), @name)), '`.&lt;&gt;', '-/()'),  '.html')"
                    stylesheet="Member.xslt">

    <register-asset assetId="get-id(@assetId)"
                    version="get-version(@assetId)"/>
    
    <with-param name="assetId" select="@assetId" />
  </apply-stylesheet>-->

</template>